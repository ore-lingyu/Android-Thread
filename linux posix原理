1、为什么要有线程？

一个进程可以有多个线程，这个进程本身也叫做线程只不过是主线程。通常主线程分配任务给子线程做。程序设计时候就可以某一时刻不止做一件事情，每一个线程处理各自独立的任务。

    多个线程自动可以访问相同的存储地址空间和文件描述符。
    每个线程都包含有表示执行环境所必须的信息，其中包括线程ID、一组寄存器、栈、调度优先级和策略、信号屏蔽字、errno变量及线程私有数据。一个进程所有信息对该进程所有线程共享，包括可执行代码、程序的全局内存和堆内存、栈以及文件描述符。

2、线程ID

每个线程都有一个线程ID

pthread_t//用于表示线程ID数据结构

pthread_equal (pthread_t __thread1, pthread_t __thread2);//用于比较线程ID
pthread_t pthread_self (void);//用户返回线程ID




3、线程创建

pthread_create()

/*
__newthread:函数成功返回将ID存储在此变量中。
__attr:定制线程属性。
__start_routine:函数指针。
__arg:传递给函数的参数。
*/
int pthread_create (pthread_t *__restrict__newthread,
               const pthread_attr_t *__restrict__attr,
               void *(*__start_routine) (void *),
               void *__restrict__arg);

4、线程终止
如果进程中的任意线程调用了exit、_Exit或者exit，那么整个进程就会终止。并且如果信号的默认动作是终止进程，那么收到该信号的进程也会终止。
单个线程可以通过3种方式退出，因此可以在不终止整个进程的情况下，停止它的控制流。

    1、线程可以简单地从启动例程中返回，返回值是线程的退出码。
    2、线程可以被同一进程中的其他线程取消。
    3、线程调用pthead_exit。
